basePath: /api
definitions:
  controllers.ChatRequest:
    properties:
      query:
        type: string
      session_id:
        type: string
    required:
    - query
    type: object
  controllers.GenerateResumeRequest:
    properties:
      query:
        description: Make query optional for compatibility with chat requests
        type: string
      session_id:
        type: string
    required:
    - session_id
    type: object
  controllers.LoginResponse:
    properties:
      expires_in:
        type: integer
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  controllers.RegistrationRequest:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  controllers.UploadDocumentRequest:
    properties:
      content:
        type: string
      metadata:
        additionalProperties: true
        type: object
    required:
    - content
    type: object
  models.BasicInfo:
    properties:
      address:
        type: string
      email:
        type: string
      github:
        type: string
      linkedin:
        type: string
      name:
        type: string
      phone:
        type: string
      website:
        type: string
    type: object
  models.Certificate:
    properties:
      expiryDate:
        type: string
      issueDate:
        type: string
      issuer:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  models.Education:
    properties:
      degree:
        type: string
      endDate:
        type: string
      field:
        type: string
      gpa:
        type: string
      institution:
        type: string
      startDate:
        type: string
    type: object
  models.Experience:
    properties:
      company:
        type: string
      description:
        type: string
      endDate:
        type: string
      highlights:
        items:
          type: string
        type: array
      position:
        type: string
      startDate:
        type: string
    type: object
  models.Project:
    properties:
      description:
        type: string
      endDate:
        type: string
      name:
        type: string
      startDate:
        type: string
      technologies:
        items:
          type: string
        type: array
      url:
        type: string
    type: object
  models.Resume:
    properties:
      basicInfo:
        $ref: '#/definitions/models.BasicInfo'
      certificates:
        items:
          $ref: '#/definitions/models.Certificate'
        type: array
      education:
        items:
          $ref: '#/definitions/models.Education'
        type: array
      experience:
        items:
          $ref: '#/definitions/models.Experience'
        type: array
      id:
        type: string
      projects:
        items:
          $ref: '#/definitions/models.Project'
        type: array
      skills:
        items:
          $ref: '#/definitions/models.Skill'
        type: array
      summary:
        type: string
    type: object
  models.Skill:
    properties:
      category:
        type: string
      level:
        type: string
      name:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      picture:
        type: string
      provider:
        description: oauth provider (google, github, etc)
        type: string
      provider_id:
        description: ID from the OAuth provider
        type: string
      role:
        description: user, admin
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@resume.in
    name: API Support
    url: http://www.resume.in/support
  description: API Server for Resume.in application with chatbot capabilities and
    OAuth authentication
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Resume.in API
  version: "1.0"
paths:
  /auth/google/callback:
    get:
      description: Processes the OAuth callback and returns JWT tokens
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Handle Google OAuth callback
      tags:
      - auth
  /auth/google/login:
    get:
      description: Redirects to Google OAuth consent page
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Initiate Google OAuth login
      tags:
      - auth
  /auth/google/register:
    get:
      description: Redirects to Google OAuth consent page with additional scopes for
        registration
      produces:
      - application/json
      responses:
        "200":
          description: Returns auth_url for consent screen
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Initiate Google OAuth registration
      tags:
      - auth
  /auth/google/register/callback:
    get:
      description: Processes the OAuth callback for registration with additional user
        information
      parameters:
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Handle Google OAuth registration callback
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - auth
  /auth/profile:
    get:
      description: Get the current authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired JWT token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh JWT token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Registration details
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/controllers.RegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Email already registered
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /chat/document:
    post:
      consumes:
      - application/json
      description: Upload a document to the vector store for context retrieval
      parameters:
      - description: Document upload request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UploadDocumentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Upload status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Upload a document
      tags:
      - chatbot
  /chat/generate-resume:
    post:
      consumes:
      - application/json
      description: Process chat history to generate an ATS-formatted resume in PDF
      parameters:
      - description: Generate resume request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.GenerateResumeRequest'
      produces:
      - application/pdf
      responses:
        "200":
          description: Resume PDF file
          schema:
            type: file
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Generate ATS Resume
      tags:
      - chatbot
  /chat/history/{sessionId}:
    get:
      consumes:
      - application/json
      description: Get the chat history for a specific session
      parameters:
      - description: Session ID
        in: path
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Chat history with session_id and messages array
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get chat history
      tags:
      - chatbot
  /chat/message:
    post:
      consumes:
      - application/json
      description: Send a message to the chatbot and get a response
      parameters:
      - description: Chat request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Response with session_id, response object, and optional resume_hint
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Send a message to the chatbot
      tags:
      - chatbot
  /experience:
    get:
      consumes:
      - application/json
      description: Get a list of all work experiences from all resumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Experience'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get all experiences
      tags:
      - experience
  /resumes:
    get:
      consumes:
      - application/json
      description: Get a list of all available resumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Resume'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get all resumes
      tags:
      - resume
    post:
      consumes:
      - application/json
      description: Add a new resume to the system
      parameters:
      - description: Resume object
        in: body
        name: resume
        required: true
        schema:
          $ref: '#/definitions/models.Resume'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Resume'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a new resume
      tags:
      - resume
  /resumes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a resume by its ID
      parameters:
      - description: Resume ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'status: deleted'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Resume not found
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete a resume
      tags:
      - resume
    get:
      consumes:
      - application/json
      description: Get a specific resume by its ID
      parameters:
      - description: Resume ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Resume'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Resume not found
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get a resume by ID
      tags:
      - resume
    put:
      consumes:
      - application/json
      description: Update an existing resume by its ID
      parameters:
      - description: Resume ID
        in: path
        name: id
        required: true
        type: string
      - description: Resume object
        in: body
        name: resume
        required: true
        schema:
          $ref: '#/definitions/models.Resume'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Resume'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Resume not found
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update a resume
      tags:
      - resume
  /skills:
    get:
      consumes:
      - application/json
      description: Get a list of all skills from all resumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Skill'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get all skills
      tags:
      - skills
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
