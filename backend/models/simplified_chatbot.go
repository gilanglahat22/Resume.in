package models

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/pgvector/pgvector-go"
	"resume.in/backend/utils"
)

// PostgresChatbotRepository provides a simplified implementation
// without LangChain dependencies to avoid build issues
type PostgresChatbotRepository struct {
	db *sql.DB
}

// NewPostgresChatbotRepository creates a new PostgreSQL chatbot repository
func NewPostgresChatbotRepository(db *sql.DB) (*PostgresChatbotRepository, error) {
	repo := &PostgresChatbotRepository{
		db: db,
	}
	
	// Initialize tables
	if err := repo.initTables(); err != nil {
		return nil, err
	}
	
	return repo, nil
}

// initTables creates the necessary tables for the chatbot functionality
func (r *PostgresChatbotRepository) initTables() error {
	// Create extension if not exists
	_, err := r.db.Exec(`CREATE EXTENSION IF NOT EXISTS vector`)
	if err != nil {
		return err
	}
	
	// Create chat_messages table
	_, err = r.db.Exec(`
		CREATE TABLE IF NOT EXISTS chat_messages (
			id SERIAL PRIMARY KEY,
			session_id VARCHAR(255) NOT NULL,
			role VARCHAR(50) NOT NULL,
			content TEXT NOT NULL,
			embedding vector(1536),
			created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
		)
	`)
	if err != nil {
		return err
	}
	
	// Create vector_documents table
	_, err = r.db.Exec(`
		CREATE TABLE IF NOT EXISTS vector_documents (
			id VARCHAR(255) PRIMARY KEY,
			content TEXT NOT NULL,
			metadata JSONB,
			embedding vector(1536) NOT NULL
		)
	`)
	if err != nil {
		return err
	}
	
	// Create index on the embedding column
	_, err = r.db.Exec(`
		CREATE INDEX IF NOT EXISTS vector_documents_embedding_idx 
		ON vector_documents 
		USING ivfflat (embedding vector_cosine_ops)
		WITH (lists = 100)
	`)
	
	return err
}

// SaveMessage saves a chat message to the database
func (r *PostgresChatbotRepository) SaveMessage(ctx context.Context, message ChatMessage) (ChatMessage, error) {
	query := `
		INSERT INTO chat_messages (session_id, role, content, embedding, created_at)
		VALUES ($1, $2, $3, $4, $5)
		RETURNING id
	`
	var id int64
	var embedVector pgvector.Vector

	if message.Embedding != nil {
		embedVector = pgvector.NewVector(message.Embedding)
	}

	err := r.db.QueryRowContext(
		ctx,
		query,
		message.SessionID,
		message.Role,
		message.Content,
		embedVector,
		time.Now(),
	).Scan(&id)

	if err != nil {
		return ChatMessage{}, err
	}

	message.ID = id
	return message, nil
}

// GetSessionMessages retrieves all messages for a given session
func (r *PostgresChatbotRepository) GetSessionMessages(ctx context.Context, sessionID string) ([]ChatMessage, error) {
	query := `
		SELECT id, session_id, role, content, created_at
		FROM chat_messages
		WHERE session_id = $1
		ORDER BY created_at ASC
	`

	rows, err := r.db.QueryContext(ctx, query, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var messages []ChatMessage
	for rows.Next() {
		var message ChatMessage
		if err := rows.Scan(
			&message.ID,
			&message.SessionID,
			&message.Role,
			&message.Content,
			&message.CreatedAt,
		); err != nil {
			return nil, err
		}
		messages = append(messages, message)
	}

	return messages, nil
}

// StoreDocument stores a document in the vector database
func (r *PostgresChatbotRepository) StoreDocument(ctx context.Context, doc VectorDocument) error {
	query := `
		INSERT INTO vector_documents (id, content, metadata, embedding)
		VALUES ($1, $2, $3, $4)
		ON CONFLICT (id) 
		DO UPDATE SET content = $2, metadata = $3, embedding = $4
	`

	if doc.ID == "" {
		doc.ID = uuid.New().String()
	}

	metadata, err := json.Marshal(doc.Metadata)
	if err != nil {
		return err
	}

	// Use a float32 array with values between 0-1 for demo purposes
	// In a real implementation, this would be generated by an embedding model
	if doc.Embedding == nil {
		doc.Embedding = make([]float32, 1536)
		for i := range doc.Embedding {
			doc.Embedding[i] = float32(i % 100) / 100.0
		}
	}

	embedVector := pgvector.NewVector(doc.Embedding)
	_, err = r.db.ExecContext(
		ctx,
		query,
		doc.ID,
		doc.Content,
		metadata,
		embedVector,
	)

	return err
}

// SearchSimilarDocuments searches for similar documents in the vector database
func (r *PostgresChatbotRepository) SearchSimilarDocuments(ctx context.Context, embedding []float32, limit int) ([]VectorDocument, error) {
	query := `
		SELECT id, content, metadata
		FROM vector_documents
		ORDER BY embedding <=> $1
		LIMIT $2
	`

	if limit <= 0 {
		limit = 5
	}

	embedVector := pgvector.NewVector(embedding)
	rows, err := r.db.QueryContext(ctx, query, embedVector, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var documents []VectorDocument
	for rows.Next() {
		var doc VectorDocument
		var metadataBytes []byte

		if err := rows.Scan(&doc.ID, &doc.Content, &metadataBytes); err != nil {
			return nil, err
		}

		if len(metadataBytes) > 0 {
			if err := json.Unmarshal(metadataBytes, &doc.Metadata); err != nil {
				return nil, err
			}
		}

		documents = append(documents, doc)
	}

	return documents, nil
}

// ProcessQuery processes a user query and returns a response
// This is a simplified implementation without LangChain
func (r *PostgresChatbotRepository) ProcessQuery(ctx context.Context, sessionID string, query string) (ChatResponse, error) {
	// Create a embedding (in a real implementation, this would use an embedding model)
	embedding := make([]float32, 1536)
	for i := range embedding {
		embedding[i] = float32(i % 100) / 100.0
	}

	// Save the user message
	userMsg := ChatMessage{
		SessionID: sessionID,
		Role:      "user",
		Content:   query,
		Embedding: embedding,
		CreatedAt: time.Now(),
	}
	
	_, err := r.SaveMessage(ctx, userMsg)
	if err != nil {
		utils.Error("Failed to save user message: %v", err)
		// Continue processing anyway
	}

	// Search for similar documents
	docs, err := r.SearchSimilarDocuments(ctx, embedding, 5)
	if err != nil {
		return ChatResponse{}, fmt.Errorf("failed to search similar documents: %w", err)
	}

	// Prepare response
	var sources []string
	var responseText string
	
	if len(docs) > 0 {
		responseText = "I found some information that might help:\n\n"
		for i, doc := range docs {
			responseText += fmt.Sprintf("%d. %s\n", i+1, doc.Content[:min(100, len(doc.Content))])
			if doc.Metadata != nil {
				if source, ok := doc.Metadata["source"].(string); ok {
					sources = append(sources, source)
				}
			}
		}
	} else {
		responseText = "I don't have specific information to answer your query. Please provide more context or documents."
	}

	// Save the assistant message
	assistantMsg := ChatMessage{
		SessionID: sessionID,
		Role:      "assistant",
		Content:   responseText,
		CreatedAt: time.Now(),
	}
	
	_, err = r.SaveMessage(ctx, assistantMsg)
	if err != nil {
		utils.Error("Failed to save assistant message: %v", err)
		// Continue anyway
	}

	// Return the response
	return ChatResponse{
		Answer:    responseText,
		Sources:   sources,
		CreatedAt: time.Now(),
	}, nil
}

// AddDocument is a helper function that prepares and stores a document
func (r *PostgresChatbotRepository) AddDocument(ctx context.Context, content string, metadata map[string]interface{}) error {
	// Create a embedding (in a real implementation, this would use an embedding model)
	embedding := make([]float32, 1536)
	for i := range embedding {
		embedding[i] = float32(i % 100) / 100.0
	}

	doc := VectorDocument{
		ID:        uuid.New().String(),
		Content:   content,
		Metadata:  metadata,
		Embedding: embedding,
	}

	return r.StoreDocument(ctx, doc)
}

// Helper function for min
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
} 